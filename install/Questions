#!/bin/bash 
# ----------------------------------
source /etc/MySB/inc/includes_before
# ----------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___        
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_       
#    _\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_      
#     _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__     
#      _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_    
#       _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_   
#        _\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_  
#         _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__ 
#          _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################
#
#	Copyright (c) 2013 toulousain79 (https://github.com/toulousain79/)
#	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	--> Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
#
##################### FIRST LINE #####################################

#### Advertising
echo
echo -e "${CRED}############################################################$CEND"
echo -e "${CRED}#$CEND ${CYELLOW}At the end of the installation, you will receive an email.$CEND"
echo -e "${CRED}#$CEND ${CYELLOW}It lists information about your account.$CEND"
echo -e "${CRED}# IMPORTANT:$CEND ${CYELLOW}Remember to also check the SPAM folder...$CEND"
echo -e "${CRED}############################################################$CEND"
echo

echo
echo -e "${CGREEN}############################################################$CEND"
echo -e "${CGREEN}#$CEND	${CYELLOW}Now, I need some informations.$CEND"
echo -e "${CGREEN}############################################################$CEND"
echo

#### MAIN USER INFO
echo -e "${CYELLOW}#### Main User Info ####$CEND"

# Username
while [ "`echo $NEWUSER | grep '@'`" != "" ] || [ "$NEWUSER" == "" ]; do
	GetString NO "Username for the first user for your seedbox (main user): " NEWUSER
done

# User password
echo
if [ -z $PASSWORD ]; then
	GetString YES "Password for this user: " PASSWORD
fi

# User IP addresses
echo
while [ ! "$CHECK_MYIP" = "$MainUserIPs" ] || [ -z "$MainUserIPs" ]; do
	MainUserIPs="`echo $SSH_CLIENT | awk '{ print $1 }'`"
	if [ "$MainUserIPs" == "" ]; then
		MainUserIPs="`who --ips | awk '{print $6}' | grep ^[0123456789]`"
		if [ "$MainUserIPs" == "" ]; then
			MainUserIPs="`who --ips | awk '{print $5}' | grep ^[0123456789]`"
		fi
	fi

	GetString NO "What are your personal IP public addresses (separate by comma)? (to add in whitelist): " MainUserIPs $MainUserIPs
	IFS=$','
	for ip in $MainUserIPs; do 
		TEMP=`ValidateIP "$ip"`
		if [ ! -z $TEMP ]; then CHECK_MYIP="$CHECK_MYIP $TEMP"; fi
	done
	unset IFS
	CHECK_MYIP=`echo $CHECK_MYIP | sed -e "s/\ /\,/g;" | sed -e "s/^$//g;"`	
done

# SMTP ?
echo
echo -e "${CYELLOW}Do you want to use an external SMTP server? (Good for safe sending emails.).$CEND"
echo -e "${CYELLOW}Choose between ${CGREEN}LOCAL$CEND${CYELLOW} or listed providers $CEND${CGREEN}FREE$CEND|$CEND${CGREEN}OVH$CEND${CYELLOW}|$CEND${CGREEN}GMAIL$CEND|$CEND${CGREEN}YAHOO$CEND${CYELLOW}. Only SSL transactions will be used (SSL/465).$CEND"
GetString NO "What is your provider? " Smtp_Provider LOCAL

Smtp_Provider=`echo $Smtp_Provider | tr '[:lower:]' '[:upper:]'`
if [ "$Smtp_Provider" != "LOCAL" ]; then	
	GetString NO "What is the username for the SMTP server ${CGREEN}$Smtp_Provider$CEND?" Smtp_Username
	GetString YES "What is the password for the SMTP server ${CGREEN}$Smtp_Provider$CEND?" Smtp_Password
fi

# User e-mail
echo
echo -e "${CYELLOW}Be careful when entering your e-mail address!$CEND"
echo -e "${CYELLOW}If the input address is wrong, you will not receive the confirmation email ...$CEND"
echo -e "${CYELLOW}If you selected a different provider that LOCAL to the previous question,$CEND"
echo -e "${CYELLOW}you must enter here email address corresponding to the SMTP account you specified.$CEND"
while [ ! "`ValidateMail $MainUserEmail`" = "0" ]; do
	GetString NO "What's your e-mail address ?" MainUserEmail
done

#### SERVER INFO
echo
echo -e "${CYELLOW}#### Server Info ####$CEND"

#Time Zone	
GetString NO "What is your time zone ? (ex: Europe/Paris): " TimeZone "Europe/Paris"

# Primary Inet
GetString NO "What is your primary network interface ? (ex: eth0, nic0, ...): " PrimaryInet $PrimaryInet

# Box' IP
while [ ! "$CHECK_SrvIpAddress" = "$SrvIpAddress" ] || [ -z "$SrvIpAddress" ]; do
	GetString NO  "What is the IP address of your box: " SrvIpAddress $SrvIpAddress
	CHECK_SrvIpAddress=`ValidateIP "$SrvIpAddress"`
done

# Box' hostname
GetString NO "What is the hostname (FQDN) of your box: " HostNameFQDN $HostNameFQDN

# NginX HTTP port
GetString NO "NginX HTTP port (usually 80): " Port_HTTP 8888

# NginX HTTPs port
GetString NO "NginX HTTPs port (usually 443): " Port_HTTPS 8889

# SSH port
GetString NO "SSH port (usually 22): " Port_SSH 8892

# FTP port
GetString NO "FTP port (usually 21): " Port_FTP 8891

# FTP Active data port
GetString NO "FTP Active Data port (usually 20): " Port_FTP_Data 8800


#### SERVICES
echo
echo -e "${CYELLOW}#### Services ####$CEND"

# Seedbox-Manager
GetString NO "Install Seedbox-Manager (recommended)? " IsInstalled_Manager YES

# Cakebox Light
echo
GetString NO "Install CakeBox Light? " IsInstalled_Cakebox YES
if [ "$IsInstalled_Cakebox" == "YES" ]; then
	GetString NO "CakeBox port: " Ports_Cakebox 8887
fi

# Plexmedia server
echo
GetString NO "Install Plex Media? " IsInstalled_PlexMedia YES

# Webmin
echo
GetString NO "Install Webmin? " IsInstalled_Webmin YES
if [ "$IsInstalled_Webmin" == "YES" ]; then
	GetString NO "Webmin port  (usually 10000): " Ports_Webmin 8890
fi

# OpenVPN
echo
if [ "`ls -la /dev/net/tun &>2 /dev/null && echo $?`" == "0" ]; then
	GetString NO "Install OpenVPN? " IsInstalled_OpenVPN YES
	if [ "$IsInstalled_OpenVPN" == "YES" ]; then
		GetString NO  "OpenVPN port with redirect gateway: " Port_OpenVPN_WithGW 8893
		GetString NO  "OpenVPN port without redirect gateway: " Port_OpenVPN_WithoutGW 8894
		echo -e "${CYELLOW}You can use OpenVPN with TCP or UDP.$CEND ${CYELLOW}(TCP is recommended)$CEND"
		GetString NO "Which protocol, 'UDP' OR 'TCP' ? : " OpenVPN_Proto TCP
	fi
else
	echo -e "${CYELLOW}Your system is an$CEND ${CRED}OpenVZ container$CEND${CYELLOW}.$CEND"
	echo -e "${CYELLOW}You must follow this link BEFORE install 'MySB'.$CEND"
	echo -e "${CGREEN}https://openvpn.net/index.php/access-server/docs/admin-guides/186-how-to-run-access-server-on-a-vps-container.html$CEND"
	IsInstalled_OpenVPN=NO
	
	GetString NO  "Do you want to continue without OpenVPN, type 'yes' ?" CONTINUE NO
	if [ "$CONTINUE" == "NO" ]; then
		echo -e "${CYELLOW}OK, see you later...$CEND"
		echo
		echo
		EndingScript 0
	fi	
fi

#### SECURITY
echo
echo -e "${CYELLOW}#### Security ####$CEND"

# Logwatch
GetString NO "Install Logwatch ?" IsInstalled_LogWatch YES

# Fail2Ban
echo
GetString NO "Install Fail2ban? " IsInstalled_Fail2Ban YES

# Blocklist
echo
echo -e "${CYELLOW}How should we manage blocklists?$CEND"
echo -e "${CYELLOW}With$CEND ${CGREEN}PeerGuardian$CEND${CYELLOW}, you completely protect your seedbox. You also use less RAM. $CEND"
echo -e "${CYELLOW}While with$CEND ${CGREEN}rTorrent$CEND${CYELLOW}, you will only protect your use of rTorrent. And memory consumption will be dependent on the number of seedbox users.$CEND"
echo -e "${CYELLOW}Choose '$CEND${CGREEN}none$CEND${CYELLOW}' if you don't want to use a blocklist. It's not recommended.$CEND"

if [ -z $IFPVEKERNEL ]; then
	if [ "$MEMORY" -lt "2048" ]; then
		echo -e "${CYELLOW}Your system have ${CRED}$MEMORY$CEND ${CYELLOW}MB of RAM. I recommend using PeerGuardian.$CEND"
	else
		echo -e "${CYELLOW}Your system have ${CRED}$MEMORY$CEND ${CYELLOW}MB of RAM. You can choose between PeerGuardian and rTorrent.$CEND"
	fi
	GetString NO "'PeerGuardian' OR 'rTorrent' OR 'none'?" MySB_PeerBlock "PeerGuardian"
else
	echo -e "${CYELLOW}Your system is an$CEND ${CRED}OpenVZ container$CEND${CYELLOW}.$CEND"
	echo -e "${CYELLOW}It's not possible to install$CEND ${CGREEN}PeerGuardian$CEND${CYELLOW}.$CEND"
	GetString NO "'rTorrent' OR 'none'?" MySB_PeerBlock "rTorrent"
fi

# DNScrypt-proxy
echo
GetString NO "Install DNScrypt-proxy? " IsInstalled_DNScrypt YES
if [ ! -z $IFPVEKERNEL ] && [ "$IsInstalled_DNScrypt" == "YES" ]; then
	echo -e "${CYELLOW}Your system is an$CEND ${CRED}OpenVZ container$CEND${CYELLOW}.$CEND"
	echo -e "${CYELLOW}At the end of the installation, you should replace your DNS (/etc/resolv.conf) with ${CGREEN}nameserver 127.0.0.1$CEND${CYELLOW} through the OpenVZ host (eg Proxmox).$CEND"
	echo -e "${CYELLOW}Otherwise you will lose your configuration on the next reboot.$CEND"
	sleep 10
fi
	
#### permanently adding scripts to PATH to all users and root
echo "PATH=$PATH:/etc/MySB/bin:/sbin" | tee -a /etc/profile &> /dev/null
echo "export PATH" | tee -a /etc/profile &> /dev/null
echo "PATH=$PATH:/etc/MySB/bin:/sbin" | tee -a /root/.bashrc &> /dev/null
echo "export PATH" | tee -a /root/.bashrc &> /dev/null

#### Add answer to SQLite db
# 'system' table
sqlite3 $SQLiteDB\
	"INSERT into system (hostname,ipv4,primary_inet,timezone,port_ftp,port_ftp_data,port_ftp_passive,port_ssh,port_https,port_http)\
	VALUES (\"$HostNameFQDN\",\"$SrvIpAddress\",\"$PrimaryInet\",\"$TimeZone\",\"$Port_FTP\",\"$Port_FTP_Data\",\"65000:65535\",\"$Port_SSH\",\"$Port_HTTPS\",\"$Port_HTTP\");"

# 'smtp' table
sqlite3 $SQLiteDB\
	"INSERT into smtp (smtp_provider,smtp_username,smtp_passwd)\
	VALUES (\"$Smtp_Provider\",\"$Smtp_Username\",\"$Smtp_Password\");"
	
# 'users' table (Main user)
sqlite3 $SQLiteDB\
	"INSERT into users (users_ident,users_email,users_passwd,sftp,sudo,admin,fixed_ip)\
	VALUES (\"$NEWUSER\",\"$MainUserEmail\",\"$PASSWORD\",\"1\",\"1\",\"1\",\"$MainUserIPs\");"
	
# 'services' table
if [ "$IsInstalled_Manager" == "YES" ]; then
	sqlite3 $SQLiteDB "UPDATE services SET is_installed = '1' WHERE serv_name = 'Seedbox-Manager';"
fi

if [ "$IsInstalled_Cakebox" == "YES" ]; then
	sqlite3 $SQLiteDB "UPDATE services SET is_installed = '1', ports_tcp = '$Ports_Cakebox' WHERE serv_name = 'CakeBox-Light';"
fi

if [ "$IsInstalled_PlexMedia" == "YES" ]; then
	sqlite3 $SQLiteDB "UPDATE services SET is_installed = '1' WHERE serv_name = 'Plex Media Server';"
fi

if [ "$IsInstalled_Webmin" == "YES" ]; then
	sqlite3 $SQLiteDB "UPDATE services SET is_installed = '1', ports_tcp = '$Ports_Webmin' WHERE serv_name = 'Webmin';"
fi

if [ "$IsInstalled_OpenVPN" == "YES" ]; then
	sqlite3 $SQLiteDB "UPDATE services SET is_installed = '1' WHERE serv_name = 'OpenVPN';"
	case "$OpenVPN_Proto" in
		"TCP")
			sqlite3 $SQLiteDB "UPDATE services SET is_installed = '1', ports_tcp = '$Port_OpenVPN_WithGW $Port_OpenVPN_WithoutGW', ports_udp = '' WHERE serv_name = 'OpenVPN';"		
		;;
		"UDP")
			sqlite3 $SQLiteDB "UPDATE services SET is_installed = '1', ports_tcp = '', ports_udp = '$Port_OpenVPN_WithGW $Port_OpenVPN_WithoutGW' WHERE serv_name = 'OpenVPN';"
		;;				
	esac	
fi

if [ "$IsInstalled_LogWatch" == "YES" ]; then
	sqlite3 $SQLiteDB "UPDATE services SET is_installed = '1' WHERE serv_name = 'LogWatch';"
fi

if [ "$IsInstalled_Fail2Ban" == "YES" ]; then
	sqlite3 $SQLiteDB "UPDATE services SET is_installed = '1' WHERE serv_name = 'Fail2Ban';"
fi

if [ "$IsInstalled_DNScrypt" == "YES" ]; then
	sqlite3 $SQLiteDB "UPDATE services SET is_installed = '1' WHERE serv_name = 'DNScrypt-proxy';"
fi

case "$MySB_PeerBlock" in
	"PeerGuardian")
		sqlite3 $SQLiteDB "UPDATE services SET is_installed = '1' WHERE serv_name = 'PeerGuardian';"
		sqlite3 $SQLiteDB "UPDATE services SET is_installed = '0' WHERE serv_name = 'rTorrent Block List';"
	;;
	"rTorrent")
		sqlite3 $SQLiteDB "UPDATE services SET is_installed = '0' WHERE serv_name = 'PeerGuardian';"
		sqlite3 $SQLiteDB "UPDATE services SET is_installed = '1' WHERE serv_name = 'rTorrent Block List';"
	;;
	*)
		sqlite3 $SQLiteDB "UPDATE services SET is_installed = '0' WHERE serv_name = 'PeerGuardian';"
		sqlite3 $SQLiteDB "UPDATE services SET is_installed = '0' WHERE serv_name = 'rTorrent Block List';"		
	;;
esac
	
# -----------------------------------------
source /etc/MySB/inc/includes_after
# -----------------------------------------
##################### LAST LINE ######################################